package org.logisticPlanning.tsp.solving.operators.permutation.mutation;

import java.io.PrintStream;

import org.logisticPlanning.tsp.benchmarking.objective.ObjectiveFunction;
import org.logisticPlanning.tsp.solving.Individual;
import org.logisticPlanning.tsp.solving.algorithms.localSearch.permutation.vns.EImprovementSelectionPolicy;
import org.logisticPlanning.tsp.solving.algorithms.localSearch.permutation.vns.PermutationVNS;
import org.logisticPlanning.tsp.solving.operators.UnaryOperator;
import org.logisticPlanning.tsp.solving.operators.permutation.update.PermutationUpdateOperator;
import org.logisticPlanning.tsp.solving.operators.permutation.update.PermutationUpdate_Reverse;
import org.logisticPlanning.tsp.solving.operators.permutation.update.PermutationUpdate_Rotate_Left;
import org.logisticPlanning.tsp.solving.operators.permutation.update.PermutationUpdate_Rotate_Right;
import org.logisticPlanning.tsp.solving.operators.permutation.update.PermutationUpdate_Swap;
import org.logisticPlanning.utils.NamedObject;
import org.logisticPlanning.utils.config.Configurable;
import org.logisticPlanning.utils.config.Configuration;
import org.logisticPlanning.utils.math.random.Randomizer;

/**
 * <@jnf><#noparse><#include
 * "../../../algorithms/localSearch/permutation/vns/_vns.ftl"/>
 * <@vnsDesc>This class defines an unary search operation (mutation) that
 * performs</@vnsDesc>
 * <p>
 * The version of PermutationVNSMutation before the
 * consolidation into local search done in version 0.9.8 of ${projectName}.
 * </p>
 * <ol>
 * <li>Our VNS mutation first randomizes the order of the neighborhoods (search
 * operators).</li>
 * <li>The current neighborhood index {@code k} is set to {@code 0}.</li>
 * <li>In a loop repeat (until the
 * {@link org.logisticPlanning.tsp.benchmarking.objective.ObjectiveFunction#shouldTerminate()
 * termination criterion} is met):
 * <ol>
 * <li>As long as the neighborhood index {@code k} is between {@code 0} and
 * {@code number of neighborhoods}, repeat:
 * <ol>
 * <li>Try to find an improving move, i.e., a move that can improve the
 * candidate solution. This means indices {@code i} and {@code j} for
 * neighborhood {@code k} that would lead to a distance reduction of tour
 * {@code x}. Depending on the {@link #m_improvementSelectionPolicy}, either
 * the first or best such move is chosen.</li>
 * <li>If an improving move was found, apply it and set {@code k=0}, otherwise
 * set {@code k=k+1}.</li>
 * </ol>
 * </li>
 * <li>If we get here, then none of the neighborhoods (search operators) can
 * make the current tour {@code x} any shorter for any index pair {@code (i,j)}
 * . This means that we arrived in a local optimum from the perspective of all
 * available operators. If this optimum is different than the input solution,
 * we return it. Otherwise: In order to escape from the optimum, we do the
 * following:
 * <ol>
 * <li>Shuffle a random part of {@code x}.</li>
 * <li>Shuffle the neighborhoods.</li>
 * </ol>
 * </li>
 * </ol>
 * </li>
 * </ol>
 * <@citations/> <@javaAuthorVersion/> <@changeLog> <@vnsErrorChangeLogEntry/>
 * </@changeLog></#noparse></@jnf>
 */
public class PermutationVNSMutation extends UnaryOperator<int[]> {
  /** the serial version uid */
  private static final long serialVersionUID = 1L;

  /** the default neighborhoods */
  private static final PermutationUpdateOperator[] DEFAULT_NEIGHBORHOODS = new PermutationUpdateOperator[] {//
      PermutationUpdate_Swap.INSTANCE,//
      PermutationUpdate_Reverse.INSTANCE,//
      PermutationUpdate_Rotate_Left.INSTANCE,//
      PermutationUpdate_Rotate_Right.INSTANCE, };

  /**
   * the update operations (neighborhoods)
   * 
   * @serial a non-null array with the (non-null) updating operations
   *         (neighborhoods)
   */
  private final PermutationUpdateOperator[] m_ops;

  /**
   * the policy regarding whether we should use the first improvement or best
   * improvement
   * 
   * @serial the non-null improvement selection policy
   */
  private EImprovementSelectionPolicy m_improvementSelectionPolicy;

  /** the temporary operators */
  private transient PermutationUpdateOperator[] m_temp;

  /** create */
  public PermutationVNSMutation() {
    super("PermutationVNSMutator"); //$NON-NLS-1$
    this.m_ops = PermutationVNSMutation.DEFAULT_NEIGHBORHOODS;
    this.m_improvementSelectionPolicy = EImprovementSelectionPolicy.DECIDE_RANDOMLY_PER_CALL;
  }

  /** {@inheritDoc} */
  @Override
  public final void mutate(final Individual<int[]> dest,
      final ObjectiveFunction f, final Individual<int[]> parent) {

    final int n;
    final Randomizer r;
    final EImprovementSelectionPolicy policy;
    boolean firstImpIt;
    PermutationUpdateOperator[] ops;
    NamedObject tester;
    int shuffleLength, chosen, delta, bestDelta, i, j, bestI, bestJ;
    PermutationUpdateOperator op;

    n = f.n();
    r = f.getRandom();

    // see which kind of improvement we are looking for
    policy = this.m_improvementSelectionPolicy.getCallPolicy(r);
    firstImpIt = policy.getIterationPolicy(r).useFirstImprovement();

    // get the solution from the parent
    if (dest.solution == null) {
      dest.solution = parent.solution.clone();
    } else {
      if (dest.solution.length != n) {
        dest.solution = new int[n];
      }
      System.arraycopy(parent.solution, 0, dest.solution, 0, n);
    }
    dest.tourLength = parent.tourLength;
    dest.producer = this;
    tester = parent.producer;

    ops = this.m_temp;
    if (ops == null) {
      this.m_temp = ops = this.m_ops.clone();
    }

    for (;;) {
      // In this main loop, we first randomize the neighborhood orders (to make
      // the algorithm more random) and then perform a VNS.
      // The VNS tries to find improving moves in the neighborhood at index
      // "0". If none is found there, it goes to neighborhood "1", then to "2",
      // and so on. As soon as an improving move was found, we return to
      // neighborhood 0. If no improving move is found, we come back right
      // here, after shuffling a part of the solution at the bottom of this
      // loop.

      if (tester != this) {
        chosen = 0;
        r.shuffle(ops);

        // Perform the VNS. Chosen will be increased when no improving move
        // can be found.
        while (chosen < ops.length) {
          op = ops[chosen];
          bestI = bestJ = bestDelta = Integer.MAX_VALUE;

          // Test all possible modifications that the current neighborhood can
          // offer (or just grab the first improving move).
          findBest: for (j = n; (--j) > 0;) {
            for (i = j; (--i) >= 0;) {

              // Check operation for indices (i,j)
              delta = op.delta(dest.solution, f, i, j);
              if (delta < bestDelta) { // Remember best possible move.
                bestDelta = delta;
                bestI = i;
                bestJ = j;
                if (firstImpIt && (delta < 0)) {
                  // if configuration says so, we can also stop as soon as we
                  // have one improving move
                  break findBest;
                }
              }
            }
          }

          // Did we find an improvement, i.e., is there an application of the
          // search operator that would decrease the tour length?
          if (bestDelta < 0) {// Yes! we found one improving move!
            op.update(dest.solution, bestI, bestJ);// apply this move
            dest.tourLength += bestDelta; // modify tour length
            f.registerFE(dest.solution, dest.tourLength); // register new tour
            chosen = 0; // go back to the initial neighborhood
          } else {
            chosen++; // try next neighborhood
          }

          if (f.shouldTerminate()) {
            return; // should we terminate?
          }
        }

        // No further improvements are possible.
        // The new solution is an optimum with respect to all neighborhoods.
        // If the new solution is different from the original one, we can quit
        if (dest.tourLength != parent.tourLength) {
          return;
        }
      }

      tester = null;// ensure that iteration will be done next time

      // Oh, we tried all neighborhoods - but none provided an improvement!
      // So we start again at the parent solution but shuffle it a bit.
      System.arraycopy(parent.solution, 0, dest.solution, 0, n);

      shuffleLength = (r.nextInt(n - 5) + 4); // shuffle at least 4 nodes
      r.shuffle(dest.solution, r.nextInt((n - shuffleLength) + 1),
          shuffleLength);
      dest.tourLength = f.evaluate(dest.solution); // and evaluate the shuffled
                                                   // solution

      if (f.shouldTerminate()) {
        return; // ok, terminate
      }

      // see which kind of improvement we are looking for
      firstImpIt = policy.getIterationPolicy(r).useFirstImprovement();
    }
  }

  /** {@inheritDoc} */
  @Override
  public final PermutationVNSMutation clone() {
    PermutationVNSMutation res;
    res = ((PermutationVNSMutation) (super.clone()));
    res.m_temp = null;
    return res;
  }

  /** {@inheritDoc} */
  @Override
  public void printConfiguration(final PrintStream ps) {
    super.printConfiguration(ps);

    Configurable.printKey(PermutationVNS.PARAM_NEIGHBORHOODS, ps);
    Configurable.printlnObject(this.m_ops, ps);

    Configurable.printKey(PermutationVNS.PARAM_IMPROVEMENT_SELECTION_POLICY,
        ps);
    Configurable.printlnObject(this.m_improvementSelectionPolicy, ps);
  }

  /** {@inheritDoc} */
  @Override
  public void printParameters(final PrintStream ps) {
    super.printParameters(ps);

    Configurable.printKey(PermutationVNS.PARAM_IMPROVEMENT_SELECTION_POLICY,
        ps);
    ps.println(//
    "should we use the best possible improvement or the first one discovered?"); //$NON-NLS-1$

    for (final Configurable c : this.m_ops) {
      c.printParameters(ps);
    }
  }

  /** {@inheritDoc} */
  @Override
  public void configure(final Configuration config) {
    super.configure(config);

    this.m_improvementSelectionPolicy = config.getConstant(
        PermutationVNS.PARAM_IMPROVEMENT_SELECTION_POLICY,
        EImprovementSelectionPolicy.class, EImprovementSelectionPolicy.class,
        this.m_improvementSelectionPolicy);

    for (final Configurable c : this.m_ops) {
      c.configure(config);
    }
  }

  /**
   * set the policy regarding whether the first improvement or the best
   * improvement should be used
   * 
   * @param i
   *          the policy
   */
  public final void setImprovementSelectionPolicy(
      final EImprovementSelectionPolicy i) {
    if (i != null) {
      this.m_improvementSelectionPolicy = i;
    }
  }
}
